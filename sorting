=========================removing duplicates=======================================================
a=[1,3,2,3,3,2,5]
res=[]
for i in a:
  if i not in res:
    res.append(i)
print(res)
output:[1,3,2,5]
==========================how many times the numbers is repeated using dict ============================
a=[1,3,2,1,2,3,2,4,1]
rees={}
for i in a:
  if i in res:
      res[i]+=1
  else:
      res[i]=1
print(res)
output:{1:3 ,3:2 ,2:3 ,4:1}
==================================bubble sort======================================================
def Bubble_sort(a):
    for phase in range(1,len(a)):
        flag = 0
        for i in range(len(a)-phase):
            if a[i]>a[i+1]:
                flag =1
                a[i], a[i+1] =a[i+1], a[i]
        if flag == 0: break
    return a
==============================insertion sort=========================================================
def Insertion_sort(a):
    for i in range(1,len(a)):
        j = i-1
        temp = a[i]
        while j>=0 and a[j]>temp:
            a[j+1]=a[j]
            j-=1
        a[j+1]=temp
    return a
============================selection sort===========================================================
def selection_sort(a):
    for i in range(len(a)-1):
        min_index = i
        for j in range(i+1, len(a)):
            if a[j] < a[min_index]:
                min_index = j
        if min_index != i:
            a[min_index], a[i] = a[i], a[min_index]
    return a

a = [2.6, 14, 17.7, 91, 354]
print(selection_sort(a))
output:[2.6, 14, 17.7, 91, 354]
=============================quick sort================================================================
def quick_sort(a,s,e):
    if s<e:
        pivot_index = partition(a,s,e)
        quick_sort(a,s,pivot_index-1)
        quick_sort(a,pivot_index+1,e)
def partition(a,s,e):
    pivot = e
    l = e-1
    while s<=l:
        while a[s] < a[pivot]:
            s+=1
        while l>=0 and a[l]>= a[pivot]:
            l-=1
        if s<l: a[s] , a[l]  = a[l] ,a[s]
    if s>l:  a[s] , a[pivot] = a[pivot] , a[s]
    return s
a = [ 21 ,18,61,45,81,10]
print( quick_sort(a,0,len(a)-1) )
print(a)	
===========================================merge sort================================================= 
def Merge_sort(arr):
    if len(arr)==1:
         return
    mid = len(arr)//2
    left = arr[:mid]
    right = arr[mid:]
    Merge_sort(left)
    Merge_sort(right)

    k = i= j =0
    while i<len(left) and j<len(right):
        if left[i]<right[j]:
            arr[k] = left[i]
            i+=1
        else:
            arr[k] = right[j]
            j+=1
        k+=1
    while i<len(left):
        arr[k]=left[i]
        i+=1
        k+=1
    while j < len(right):
        arr[k] = right[j]
        j+=1
        k+=1
a = [ 21 ,18,61,45,81,10]
Merge_sort(a)
print(a)

